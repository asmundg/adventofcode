Well, that turned out to be a read-only exercise. Once we realize that
z is essentially a stack, and we're either pushing (when the input
doesn't match the top of the stack (plus some modifier)) or pop'ing
(dividing by 26), it's clear that the stack needs to end up empty for
the program to yield 0.

Fortunately, the iterations that pop the stack also don't add to it,
which makes it pretty easy to identify which values need to match the
top of the stack. I suppose the program didn't strictly have to couple
pop and no-add, but fortunately, we didn't have to identify
those. Which means we can solve this using pen and paper:

|  i | +y |  +x | div | stack                        | eq            | max n | min n |
|----+----+-----+-----+------------------------------+---------------+-------+-------|
|  0 |  7 |  12 |   1 | [i0+7]                       |               |     9 |     5 |
|  1 |  8 |  12 |   1 | [i0+7,i1+8]                  |               |     7 |     1 |
|  2 |  2 |  13 |   1 | [i0+7,i1+8,i2+2]             |               |     9 |     6 |
|  3 | 11 |  12 |   1 | [i0+7,i1+8,i2+2,i3+11]       |               |     1 |     1 |
|  4 |  6 |  -3 |  26 | [i0+7,i1+8,i2+2]             | i3+8 == i4    |     9 |     9 |
|  5 | 12 |  10 |   1 | [i0+7,i1+8,i2+2,i5+12]       |               |     9 |     1 |
|  6 | 14 |  14 |   1 | [i0+7,i1+8,i2+2,i5+12,i6+14] |               |     9 |     3 |
|  7 | 13 | -16 |  26 | [i0+7,i1+8,i2+2,i5+12]       | i6-2 == i7    |     7 |     1 |
|  8 | 15 |  12 |   1 | [i0+7,i1+8,i2+2,i5+12,i8+15] |               |     2 |     1 |
|  9 | 10 |  -8 |  26 | [i0+7,i1+8,i2+2,i5+12]       | i8+7 == i9    |     9 |     8 |
| 10 |  6 | -12 |  26 | [i0+7,i1+8,i2+2]             | i5 == i10     |     9 |     1 |
| 11 | 10 |  -7 |  26 | [i0+7,i1+8]                  | i2-5 == i11   |     4 |     1 |
| 12 |  8 |  -6 |  26 | [i0+7]                       | i1+2 == i12   |     9 |     3 |
| 13 |  5 | -11 |  26 | []                           | i0 - 4 == i13 |     5 |     1 |

97919997299495
51619131181131
